// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource prisma {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstname     String
  lastname      String
  phone         String?
  email         String          @unique
  emailVerified DateTime?
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  cartId        String?         @unique
  cart          Cart?           @relation
  orders        Order[]
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  isAdmin Boolean @default(false)
}

model Article {
  id          String      @id @default(cuid())
  name        String      @unique
  unit        String
  price       Float
  image       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  image       String? // URL de l'image
  description String?
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  articleId String
  article   Article  @relation(fields: [articleId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([cartId, articleId]) // ðŸš€ Ajout de la contrainte UNIQUE
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  total       Float // potentiel rabais ou reduction donc par forcement Ã©gal au qttÃ© * prix articles
  note        String?
  status      String      @default("PENDING") // "pending", "completed", etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
  firstname   String
  lastname    String
  email       String
  phone       String
  promoCodeId String?
  promoCode   PromoCode?  @relation(fields: [promoCodeId], references: [id])
}

model PromoCode {
  id        String    @id @default(cuid())
  code      String    @unique
  discount  Float
  startDate DateTime  @default(now())
  endDate   DateTime?
  maxUses   Int?
  useCount  Int       @default(0)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
  quantity  Int     @default(1)
  price     Float // potentiel rabais ou reduction donc par forcement Ã©gal au qttÃ© * prix articles

  @@unique([orderId, articleId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
